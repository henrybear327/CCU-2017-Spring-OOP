import java.io.*;
import java.util.*;

/**
 * To test for the correctness of get1stDayOfMonth() in calendar.cpp:
 * 1. set the DEBUG constant to 2
 * 2. redirect the output to a file
 * 3. execute this program (e.g. java Main < output) 
 * 	-> if it terminates early, then the calculation in calendar.cpp must be WRONG
 * 
 * @author henrybear327
 *
 * ....../Assignment 1/Test/bin
 * cp ../../output .; java Main < output
 */

public class Main {
	/**
	 * Converts Java's day-of-week obtained from GregorianCalendar
	 * to conform with calendar.cpp's day-of-week
	 * 
	 * @param dayOfWeek integer day-of-week generated by GregorianCalendar
	 * @return integer converted Java's day-of-week to conform with calendar.cpp's day-of-week
	 * @throws Exception day-of-week is invalid
	 */
	private static int convertJavaDayOfWeekToCpp(int dayOfWeek) throws Exception {
		int dayOfTheWeek = -1;

		if (dayOfWeek == 2) {
			dayOfTheWeek = 1;
		} else if (dayOfWeek == 3) {
			dayOfTheWeek = 2;
		} else if (dayOfWeek == 4) {
			dayOfTheWeek = 3;
		} else if (dayOfWeek == 5) {
			dayOfTheWeek = 4;
		} else if (dayOfWeek == 6) {
			dayOfTheWeek = 5;
		} else if (dayOfWeek == 7) {
			dayOfTheWeek = 6;
		} else if (dayOfWeek == 1) {
			dayOfTheWeek = 7;
		}

		if (dayOfTheWeek == -1) {
			throw new Exception("Invalid java dayOfWeek argument");
		}

		return dayOfTheWeek;
	}

	/**
	 * Use GregorianCalendar to get the day of week of year/month/1
	 * 
	 * @param year
	 *            integer in range [1901, 2099]
	 * @param month
	 *            integer in range [1, 12]
	 * @return integer day of week (day-of-week 1 - 7 maps to Sun. to Sat.)
	 */
	private static int calculateDayOfWeek(int year, int month) {
		GregorianCalendar c = new GregorianCalendar(year, month - 1, 1);

		String dayOfTheWeek = "";
		int dayOfWeek = c.get(Calendar.DAY_OF_WEEK);
		if (dayOfWeek == 2) {
			dayOfTheWeek = "Mon";
		} else if (dayOfWeek == 3) {
			dayOfTheWeek = "Tue";
		} else if (dayOfWeek == 4) {
			dayOfTheWeek = "Wed";
		} else if (dayOfWeek == 5) {
			dayOfTheWeek = "Thu";
		} else if (dayOfWeek == 6) {
			dayOfTheWeek = "Fri";
		} else if (dayOfWeek == 7) {
			dayOfTheWeek = "Sat";
		} else if (dayOfWeek == 1) {
			dayOfTheWeek = "Sun";
		}

		// notice:
		// month starts from 0
		// day-of-week 1 - 7 maps to Sun. to Sat.
		// out.printf("%d %d %d %s\n", c.get(Calendar.YEAR),
		// c.get(Calendar.MONTH), c.get(Calendar.DAY_OF_MONTH), dayOfTheWeek);
		out.println(Integer.toString(year) + " " + Integer.toString(month) + " " + dayOfTheWeek);

		return dayOfWeek;
	}

	/**
	 * Convert correctDayOfWeek to conform with the output of calendar.cpp, and
	 * then perform comparison. If mismatch does happen, the program will be
	 * terminated, with appropriate message indicating which year and month
	 * caused the error.
	 * 
	 * @param year
	 *            integer in range [1901, 2099]
	 * @param month
	 *            integer in range [1, 12]
	 * @param firstWeekDay
	 *            integer in range [1, 7] (generated by calendar.cpp)
	 * @param correctDayOfWeek
	 *            integer in range [1, 7] (generated by GregorianCalendar)
	 */
	private static void checkDayOfWeek(int year, int month, int firstWeekDay, int correctDayOfWeek) {
		int convertedDayOfWeek = -1;
		try {
			convertedDayOfWeek = convertJavaDayOfWeekToCpp(correctDayOfWeek);
		} catch (Exception e) {
			out.println(e.getMessage());
			out.flush();
			System.exit(1);
		}

		if (firstWeekDay == convertedDayOfWeek) {
			out.println("Ok!");
		} else {
			out.printf("WA! year = %d month = %d, %d != %d", year, month, firstWeekDay, correctDayOfWeek);
			out.flush();
			System.exit(1);
		}

		return;
	}

	public static void main(String[] arg) {
		MyScanner sc = new MyScanner();
		out = new PrintWriter(new BufferedOutputStream(System.out));

		while (sc.hasNext()) {
			// read in year month and day of week generated from calander.cpp,
			// with DEBUG constant set to 2
			int year = sc.nextInt();
			int month = sc.nextInt();
			int firstWeekDay = sc.nextInt();

			// get day of week from Java GregorianCalendar
			int correctDayOfWeek = calculateDayOfWeek(year, month);

			// compare the output
			// terminates the checker if the mismatch happens
			checkDayOfWeek(year, month, firstWeekDay, correctDayOfWeek);
		}
		out.close();
	}

	// PrintWriter for faster output
	public static PrintWriter out;

	// MyScanner class for faster input
	public static class MyScanner {
		BufferedReader br;
		StringTokenizer st;

		public MyScanner() {
			br = new BufferedReader(new InputStreamReader(System.in));
		}

		boolean hasNext() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (Exception e) {
					return false;
				}
			}
			return true;
		}

		String next() {
			if (hasNext())
				return st.nextToken();
			return null;
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		String nextLine() {
			String str = "";
			try {
				str = br.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return str;
		}
	}
}
